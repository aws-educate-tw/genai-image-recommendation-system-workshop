import base64
import io
import json
import logging
import boto3
from PIL import Image

from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by Bedrock"
    def __init__(self, message):
        self.message = message

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using Bedrock model.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with Bedrock model %s", model_id)

    # Create Bedrock client
    bedrock = boto3.client(service_name='bedrock-runtime')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )

    response_body = json.loads(response['body'].read().decode('utf-8'))
    logger.info(response_body)

    # Extract base64 encoded image data from the response
    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
        raise ImageError(f"Image generation error. Error code is {finish_reason}")

    logger.info("Successfully generated image with Bedrock model %s", model_id)

    return image_bytes


def lambda_handler(event, context):
    """
    AWS Lambda entry point to trigger image generation.
    """

    logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

    model_id = 'stability.stable-diffusion-xl-v1'

    # Extract the text prompt from the Lambda event
    prompt = event.get("prompt", "A scenic view of the mountains")

    # Create request body with the extracted prompt
    body = json.dumps({
        "text_prompts": [
            {"text": prompt}
        ],
        "cfg_scale": 10,
        "seed": 0,
        "steps": 50,
        "samples": 1,
        "style_preset": "photographic"
    })

    try:
        # Generate the image
        image_bytes = generate_image(model_id=model_id, body=body)

        # Convert image bytes to a displayable image
        image = Image.open(io.BytesIO(image_bytes))
        image.show()

        # Optionally, save or return image as base64-encoded string
        buffered = io.BytesIO()
        image.save(buffered, format="PNG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode('utf-8')

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Image generated successfully', 'image': img_base64})
        }

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        return {'statusCode': 500, 'body': json.dumps({'message': 'Client error', 'error': message})}
    except ImageError as err:
        logger.error(err.message)
        return {'statusCode': 500, 'body': json.dumps({'message': 'Image generation error', 'error': err.message})}
    except Exception as e:
        logger.error(f"An unexpected error occurred: {str(e)}")
        return {'statusCode': 500, 'body': json.dumps({'message': 'Unexpected error', 'error': str(e)})}

